spring:
  config:
    import: application-secret.yml

  datasource:
    url: jdbc:postgresql://${secret.db.host}:${secret.db.port}/${secret.db.name}?prepareThreshold=0
    username: ${secret.db.username}
    password: ${secret.db.password}
    driver-class-name: org.postgresql.Driver

    hikari:
      maximum-pool-size: 5
      minimum-idle: 1
      idle-timeout: 10000        # 커넥션이 유휴 상태로 유지되는 시간: 10초
      max-lifetime: 15000        # 커넥션의 최대 생존 시간: 15초
      connection-timeout: 3000   # 커넥션 획득 시 최대 대기 시간: 3초
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  jackson:
    property-naming-strategy: SNAKE_CASE

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: https://auth.loco.com/.well-known/jwks.json
          # 또는 issuer-uri 사용(권장, OIDC 호환 시):
          # issuer-uri: https://auth.loco.com
          issuer: https://api.loco.com
          audience: loco-web
      client:
        registration:
          # ========== Google ==========
          google:
            client-name: Google
            client-id: ${secret.oauth.google.client-id}
            client-secret: ${secret.oauth.google.client-secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: openid, profile, email

          # ========== Kakao ==========
          kakao:
            client-name: Kakao
            client-id: ${secret.oauth.kakao.client-id}          # REST API 키
            client-secret: ${secret.oauth.kakao.client-secret}  # (선택)
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: post
            scope: profile_nickname, profile_image, account_email

          # ========== Naver ==========
          naver:
            client-name: Naver
            client-id: ${secret.oauth.naver.client-id}
            client-secret: ${secret.oauth.naver.client-secret}
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: post
            scope: name, email, profile_image

        provider:
          # Google: OIDC 표준
          google:
            issuer-uri: https://accounts.google.com

          # Kakao: 비표준 → 수동 지정
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id   # 최상위 id

          # Naver: 비표준 → 수동 지정
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
server:
  port: 8080
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 20MB
logging:
  level:
    org.hibernate.SQL: debug